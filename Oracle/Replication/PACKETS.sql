CREATE OR REPLACE PACKAGE PACKETS
AS
FUNCTION COLUMNS_V
(p_tab varchar2)
RETURN VARCHAR2;

FUNCTION COLUMNS2
(p_tab varchar2)
RETURN VARCHAR2;

FUNCTION COLUMNS2_PROS
(p_tab varchar2, P_USER VARCHAR2)
RETURN VARCHAR2;

FUNCTION COLUMNS_V_COLUMNS
(TAB VARCHAR2)
RETURN VARCHAR2;

FUNCTION COLUMNS_V_COLUMNS_PROS
(TAB VARCHAR2, P_USER VARCHAR2)
RETURN VARCHAR2;

FUNCTION NVL_C_COLUMNS
(TAB VARCHAR2)
RETURN VARCHAR2;

FUNCTION C_COLUMNS
(TAB VARCHAR2)
RETURN VARCHAR2;

FUNCTION V_COLUMNS
(TAB VARCHAR2)
RETURN VARCHAR2;

FUNCTION V_COLUMNS_PROS
(TAB VARCHAR2, P_USER VARCHAR2)
RETURN VARCHAR2;

FUNCTION OLD_COLS
(TAB VARCHAR2)
RETURN VARCHAR2;

FUNCTION COLUM
(p_tab varchar2)
RETURN VARCHAR2;

FUNCTION FULL_COLUMNS
(p_tab varchar2)
RETURN VARCHAR2;

FUNCTION FULL_COLUMNS_PROS
(p_tab varchar2, P_USER VARCHAR2)
RETURN VARCHAR2;

FUNCTION FULL_COLUMNS_V
(p_tab varchar2)
RETURN VARCHAR2;

FUNCTION NEW_COLS
(TAB VARCHAR2)
RETURN VARCHAR2;

PROCEDURE INSERT_TRIGGERS
(P_USER VARCHAR2);

PROCEDURE INSERT_TRIGGERS_TEST
(P_USER VARCHAR2);

PROCEDURE INSERT_TRIGGERS_MAN
(TAB VARCHAR2, P_USER VARCHAR2);

PROCEDURE UPDATE_TRIGGERS
(P_USER VARCHAR2);

PROCEDURE UPDATE_TRIGGERS_MAN
(TAB VARCHAR2, P_USER VARCHAR2);

PROCEDURE DELETE_TRIGGERS
(P_USER VARCHAR2);

PROCEDURE DELETE_TRIGGERS_MAN
(TAB VARCHAR2, P_USER VARCHAR2);

procedure DELETE_UPDATE_INSERT_PROCEDURE
(P_USER varchar2 , A_USER VARCHAR2);

procedure DELETE_UPDATE_INSERT_PRO_TH2
(P_USER varchar2 ,C_USER varchar2 , A_USER VARCHAR2);

procedure DELETE_UPDATE_INSERT_PRO_MAN
(TAB VARCHAR2, P_USER varchar2 , A_USER VARCHAR2);

procedure DELETE_UPDATE_INSERT_MAN_TH2
(TAB VARCHAR2, P_USER varchar2 ,C_USER varchar2 , A_USER VARCHAR2);

PROCEDURE PACKET_JOBS
(P_TIME VARCHAR2);

PROCEDURE PACKET_JOBS_TH2
(P_TIME VARCHAR2);

PROCEDURE CREATE_VIEWS;

PROCEDURE CREATE_VIEWS_MAN
(TAB VARCHAR2);

PROCEDURE UPDATE_ROW_NO;

PROCEDURE UPDATE_SEQ_NO;

PROCEDURE UPDATE_ROW_NO_MAN
(TAB VARCHAR2);

PROCEDURE ROW_NO_TRIGGERS;

PROCEDURE SEQ_NO_TRIGGERS;

PROCEDURE ROW_NO_TRIGGERS_MAN
(TAB VARCHAR2);

PROCEDURE CREATE_VIEWS_ALTER_ROW_NO;

PROCEDURE REMOVE_L$_E$_M$_O$_Q$;

PROCEDURE REMOVE_VIEWS;

PROCEDURE INSERT_DATE;

PROCEDURE UPD_RNO;

PROCEDURE NUL_RNO;

PROCEDURE MAINTAIN_ROW_NO;

PROCEDURE REMOVE_JOBS;

PROCEDURE GRANT_SEL_UPT_DET
(P_USER VARCHAR2);

PROCEDURE CREATE_DB_LINK
(P_DB VARCHAR, P_USER VARCHAR2, P_PASSWD VARCHAR2, P_TNS VARCHAR2);

PROCEDURE REMOVE_ROW_NO_INSERT_DATE;

PROCEDURE ADD_UPDATE_DATE_COLUMN;

PROCEDURE FLASH_BETWEEN
(TAB VARCHAR2 , DATE_FROM VARCHAR2, DATE_TO VARCHAR2);

PROCEDURE FLASH
(TAB VARCHAR2 , SMPL VARCHAR2);

PROCEDURE DROP_UPDATE_DATE_COLUMN;

PROCEDURE REFRESH_JOBS;

FUNCTION NEED_REFRESH
RETURN NUMBER;

PROCEDURE INTERVAL_JOBS;

PROCEDURE PROGRESS_INSERT
(OPER NUMBER);

PROCEDURE CREATE_CURRENT_TABLES;

END PACKETS;
/


CREATE OR REPLACE PACKAGE BODY PACKETS
AS

FUNCTION COLUMNS_V
(p_tab varchar2)
RETURN VARCHAR2
IS
cursor cols is
select column_name
from user_tab_columns
where table_name = p_tab
AND COLUMN_NAME NOT IN ('INSERT_DATE','UPDATE_DATE','UPDATE_DATE','REFERENCE','UPDATE_ALL','SEQ_NO');
v_col varchar2(4000);
sel_cols varchar2(4000) :='  ';
begin
open cols;
loop fetch cols into v_col;
exit when cols%notfound;
sel_cols := sel_colS||'V.'||v_col||' ,';
end loop;
close cols;
sel_cols := substr(sel_colS,1,LENGTH(SEL_COLS)-1);
RETURN SEL_COLS;
end COLUMNS_V;


FUNCTION COLUMNS2
(p_tab varchar2)
RETURN VARCHAR2
IS
cursor cols is
select column_name
from user_tab_columns
where table_name = p_tab
AND COLUMN_NAME NOT LIKE 'INSERT_DATE'
AND COLUMN_NAME NOT LIKE 'UPDATE_DATE'
AND COLUMN_NAME NOT LIKE 'UPDATE_DATE';
v_col varchar2(2000);
sel_cols varchar2(4000) :='  ';
begin
open cols;
loop fetch cols into v_col;
exit when cols%notfound;
sel_cols := sel_colS||v_col||' ,';
end loop;
close cols;
sel_cols := substr(sel_colS,1,LENGTH(SEL_COLS)-1);
RETURN SEL_COLS;
end COLUMNS2;

FUNCTION COLUMNS2_PROS
(p_tab varchar2 , P_USER VARCHAR2)
RETURN VARCHAR2
IS
CURSOR COLS IS
select column_name 
from USER_TAB_COLUMNS@PROS
where table_name = p_tab 
AND COLUMN_NAME NOT IN ('INSERT_DATE','UPDATE_DATE','UPDATE_DATE');
v_col varchar2(2000);
sel_cols varchar2(4000) :='  ';
begin
open cols;
loop fetch cols into v_col;
exit when cols%notfound;
sel_cols := sel_colS||v_col||' ,';
end loop;
close cols;
sel_cols := substr(sel_colS,1,LENGTH(SEL_COLS)-1);
RETURN SEL_COLS;
end COLUMNS2_PROS;


FUNCTION COLUMNS_V_COLUMNS
(TAB VARCHAR2)
RETURN VARCHAR2
IS
CURSOR C IS
SELECT COLUMN_NAME||' = V.'||COLUMN_NAME 
FROM USER_TAB_COLUMNS
WHERE TABLE_NAME= TAB
AND COLUMN_NAME NOT IN ('UPDATE_DATE');
V VARCHAR2(4000);
B VARCHAR2(4000) :=' ';
FULL VARCHAR2(4000);
LNG NUMBER;
BEGIN
OPEN C;
LOOP FETCH C INTO V;
EXIT WHEN C%NOTFOUND;
B := B||V||' , ';
LNG := LENGTH(B)-2;
FULL  := SUBSTR(B,1,LNG);
END LOOP;
CLOSE C;
RETURN FULL;
END COLUMNS_V_COLUMNS;

FUNCTION COLUMNS_V_COLUMNS_PROS
(TAB VARCHAR2 , P_USER VARCHAR2)
RETURN VARCHAR2
IS
CURSOR C IS
SELECT COLUMN_NAME||' = V.'||COLUMN_NAME 
FROM USER_TAB_COLUMNS@PROS
WHERE TABLE_NAME= TAB 
AND COLUMN_NAME NOT IN ('UPDATE_DATE');
V VARCHAR2(4000);
B VARCHAR2(4000) :=' ';
FULL VARCHAR2(4000);
LNG NUMBER;
BEGIN
OPEN C;
LOOP FETCH C INTO V;
EXIT WHEN C%NOTFOUND;
B := B||V||' , ';
LNG := LENGTH(B)-2;
FULL  := SUBSTR(B,1,LNG);
END LOOP;
CLOSE C;
RETURN FULL;
END COLUMNS_V_COLUMNS_PROS;


FUNCTION NVL_C_COLUMNS
(TAB VARCHAR2) RETURN VARCHAR2
IS
CURSOR I IS
SELECT 'NVL('||COLUMN_NAME||',0) = NVL(C.'||COLUMN_NAME||',0)'
FROM USER_TAB_COLUMNS
WHERE TABLE_NAME =TAB AND
DATA_TYPE IN ('NUMBER')
UNION
SELECT 'NVL('||COLUMN_NAME||',''M'') = NVL(C.'||COLUMN_NAME||',''M'')'
FROM USER_TAB_COLUMNS
WHERE TABLE_NAME =TAB AND
DATA_TYPE IN ('VARCHAR2')
UNION
SELECT COLUMN_NAME ||' =  C.'||COLUMN_NAME
FROM USER_TAB_COLUMNS
WHERE TABLE_NAME =TAB AND
DATA_TYPE IN ('DATE') and
column_name ='INSERT_DATE';
V     VARCHAR2(200);
STAT  VARCHAR2(4000);
STAT2 varchar2(4000);
LNG NUMBER;
BEGIN
OPEN I;
LOOP FETCH I INTO V;
EXIT WHEN I%NOTFOUND;
STAT := STAT||' '||V||' AND ';
LNG  := LENGTH(STAT)-4;
STAT2 := SUBSTR(STAT,1,LNG)||';';
END LOOP;
CLOSE I;
RETURN STAT2;
END NVL_C_COLUMNS;


FUNCTION C_COLUMNS
(TAB VARCHAR2) RETURN VARCHAR2
IS
CURSOR J IS
SELECT COLUMN_NAME FROM USER_TAB_COLUMNS
WHERE TABLE_NAME=TAB
AND COLUMN_NAME NOT LIKE 'UPDATE_DATE'
AND COLUMN_NAME NOT LIKE 'UPDATE_DATE';
F VARCHAR2(4000);
X VARCHAR2(4000);
L NUMBER;
K VARCHAR2(4000);
BEGIN
OPEN J;
LOOP FETCH J INTO F;
EXIT WHEN J%NOTFOUND;
X := X||'C.'||F||' , ';
L := LENGTH(X)-2;
K := SUBSTR(X,1,L);
END LOOP;
CLOSE J;
RETURN K;
END C_COLUMNS;


FUNCTION V_COLUMNS
(TAB VARCHAR2) RETURN VARCHAR2
IS
CURSOR J IS
SELECT COLUMN_NAME FROM USER_TAB_COLUMNS
WHERE TABLE_NAME=TAB
AND COLUMN_NAME NOT LIKE 'UPDATE_DATE'
AND COLUMN_NAME NOT LIKE 'UPDATE_DATE';
F VARCHAR2(4000);
X VARCHAR2(4000);
L NUMBER;
K VARCHAR2(4000);
BEGIN
OPEN J;
LOOP FETCH J INTO F;
EXIT WHEN J%NOTFOUND;
X := X||'V.'||F||' , ';
L := LENGTH(X)-2;
K := SUBSTR(X,1,L);
END LOOP;
CLOSE J;
RETURN K;
END V_COLUMNS;

FUNCTION V_COLUMNS_PROS
(TAB VARCHAR2 , P_USER VARCHAR2) 
RETURN VARCHAR2
IS
CURSOR J IS
SELECT COLUMN_NAME 
FROM USER_TAB_COLUMNS@PROS
WHERE TABLE_NAME=TAB 
AND COLUMN_NAME NOT IN ('UPDATE_DATE','UPDATE_DATE');
F VARCHAR2(4000);
X VARCHAR2(4000);
L NUMBER;
K VARCHAR2(4000);
BEGIN
OPEN J;
LOOP FETCH J INTO F;
EXIT WHEN J%NOTFOUND;
X := X||'V.'||F||' , ';
L := LENGTH(X)-2;
K := SUBSTR(X,1,L);
END LOOP;
CLOSE J;
RETURN K;
END V_COLUMNS_PROS;

FUNCTION OLD_COLS
(TAB VARCHAR2) RETURN VARCHAR2
IS
CURSOR C IS
SELECT COLUMN_NAME 
FROM USER_TAB_COLUMNS
WHERE COLUMN_NAME NOT IN
('DELETE_DATEE','UPDATE_DATE','UPDATE_DATE')
AND TABLE_NAME=TAB;
V VARCHAR2(4000);
X VARCHAR2(4000);
B VARCHAR2(4000);
L NUMBER;
BEGIN
OPEN C;
LOOP FETCH C INTO V;
EXIT WHEN C%NOTFOUND;
X := X||':OLD.'||V||' , ';
L := LENGTH(X)-2;
B := SUBSTR(X, 1,L);
END LOOP;
CLOSE C;
RETURN B;
END OLD_COLS;


FUNCTION COLUM
(p_tab varchar2)
RETURN VARCHAR2 IS
cursor cols is
select column_name
from user_tab_columns
where table_name = p_tab
AND COLUMN_NAME NOT IN ('INSERT_DATE','UPDATE_DATE','ROW_NO','DELETE_DATEE','UPDATE_DATE','REFERENCE','UPDATE_ALL','SEQ_NO');
v_col varchar2(4000);
sel_cols varchar2(4000) :='  ';
begin
open cols;
loop fetch cols into v_col;
exit when cols%notfound;
sel_cols := sel_colS||v_col||' ,';
end loop;
close cols;
sel_cols := substr(sel_colS,1,LENGTH(SEL_COLS)-1);
RETURN SEL_COLS;
end COLUM;


FUNCTION FULL_COLUMNS
(p_tab varchar2)
RETURN VARCHAR2 IS
cursor cols is
select column_name
from user_tab_columns
where table_name = p_tab
AND COLUMN_NAME NOT IN
('DELETE_DATEE','UPDATE_DATE','UPDATE_DATE');
v_col varchar2(4000);
sel_cols varchar2(4000) :='  ';
begin
open cols;
loop fetch cols into v_col;
exit when cols%notfound;
sel_cols := sel_colS||v_col||' ,';
end loop;
close cols;
sel_cols := substr(sel_colS,1,LENGTH(SEL_COLS)-1);
RETURN SEL_COLS;
end FULL_COLUMNS;

FUNCTION FULL_COLUMNS_PROS
(p_tab varchar2, P_USER VARCHAR2)
RETURN VARCHAR2 IS
CURSOR COLS IS
select column_name from 
user_tab_columns@PROS
where table_name = p_tab 
AND COLUMN_NAME NOT IN ('DELETE_DATEE','UPDATE_DATE','UPDATE_DATE');
v_col varchar2(4000);
sel_cols varchar2(4000) :='  ';
begin
open cols;
loop fetch cols into v_col;
exit when cols%notfound;
sel_cols := sel_colS||v_col||' ,';
end loop;
close cols;
sel_cols := substr(sel_colS,1,LENGTH(SEL_COLS)-1);
RETURN SEL_COLS;
end FULL_COLUMNS_PROS;

FUNCTION FULL_COLUMNS_V
(p_tab varchar2)
RETURN VARCHAR2 IS
cursor cols is
select column_name
from user_tab_columns
where table_name = p_tab
AND COLUMN_NAME NOT IN ('UPDATE_DATE','UPDATE_DATE');
v_col varchar2(4000);
sel_cols varchar2(4000) :='  ';
begin
open cols;
loop fetch cols into v_col;
exit when cols%notfound;
sel_cols := sel_colS||'V.'||v_col||' ,';
end loop;
close cols;
sel_cols := substr(sel_colS,1,LENGTH(SEL_COLS)-1);
RETURN SEL_COLS;
end FULL_COLUMNS_V;

FUNCTION NEW_COLS
(TAB VARCHAR2) RETURN VARCHAR2
IS
CURSOR C IS
SELECT COLUMN_NAME FROM USER_TAB_COLUMNS
WHERE COLUMN_NAME NOT IN
('DELETE_DATEE','UPDATE_DATE','UPDATE_DATE')
AND TABLE_NAME=TAB;
V VARCHAR2(4000);
X VARCHAR2(4000);
B VARCHAR2(4000);
L NUMBER;
BEGIN
OPEN C;
LOOP FETCH C INTO V;
EXIT WHEN C%NOTFOUND;
X := X||':NEW.'||V||' , ';
L := LENGTH(X)-2;
B := SUBSTR(X, 1,L);
END LOOP;
CLOSE C;
RETURN B;
END NEW_COLS;


PROCEDURE INSERT_TRIGGERS
(P_USER VARCHAR2)
IS
CURSOR I
IS
SELECT TABLE_NAME
FROM USER_TABLES
WHERE TABLE_NAME NOT IN('ALL_TABLES_COLUMNS','CURRENT_TABLES');
TAB      VARCHAR2(60);
STAT     VARCHAR2(100);
FUN      VARCHAR2(4000);
FUN_OLD  VARCHAR2(4000);
FULL_FUN VARCHAR2(4000);
BEGIN
OPEN I;
LOOP FETCH I INTO TAB;
EXIT WHEN I%NOTFOUND;
SELECT OLD_COLS(TAB) INTO FUN_OLD FROM DUAL;
SELECT FULL_COLUMNS(TAB) INTO FULL_FUN FROM DUAL;
SELECT COLUM(TAB) INTO FUN FROM DUAL;
STAT := SUBSTR(TAB , 1, 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE TRIGGER I$'||STAT||'
BEFORE UPDATE OF '||FUN||'
ON '||TAB||'
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
INSERT INTO '||P_USER||'.U'||STAT||' ('||FULL_FUN||' ,UPDATE_DATE ,REFERENCE)
VALUES ('||FUN_OLD||', SYSDATE,''OLD'');
END I$'||STAT||';');
END LOOP;
CLOSE I;
END INSERT_TRIGGERS;

PROCEDURE INSERT_TRIGGERS_TEST
(P_USER VARCHAR2)
IS
CURSOR I
IS
SELECT TABLE_NAME
FROM USER_TABLES
WHERE TABLE_NAME NOT IN('ALL_TABLES_COLUMNS','CURRENT_TABLES','APP_USER_LOGS','APP_USERS');
TAB      VARCHAR2(60);
STAT     VARCHAR2(100);
FUN      VARCHAR2(4000);
FUN_OLD  VARCHAR2(4000);
FULL_FUN VARCHAR2(4000);
BEGIN
OPEN I;
LOOP FETCH I INTO TAB;
EXIT WHEN I%NOTFOUND;
SELECT OLD_COLS(TAB) INTO FUN_OLD FROM DUAL;
SELECT FULL_COLUMNS(TAB) INTO FULL_FUN FROM DUAL;
SELECT COLUM(TAB) INTO FUN FROM DUAL;
STAT := SUBSTR(TAB , 1, 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE TRIGGER I$'||STAT||'
BEFORE UPDATE OF '||FUN||'
ON '||TAB||'
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
USR VARCHAR2(50);

BEGIN
SELECT APP_USERNAME INTO USR
FROM APP_USER_LOGS L , SYS.SESS S
WHERE L.SID_NO = S.SID
AND L.SERIAL_NO = S.SERIAL# 
AND L.OS_USERNAME= S.OSUSER;

INSERT INTO '||P_USER||'.U'||STAT||' ('||FULL_FUN||' ,UPDATE_DATE ,REFERENCE,APP_USERNAME)
VALUES ('||FUN_OLD||', SYSDATE,''OLD'',USR);
END I$'||STAT||';');
END LOOP;
CLOSE I;
END INSERT_TRIGGERS_TEST;
 
PROCEDURE INSERT_TRIGGERS_MAN
(TAB VARCHAR2, P_USER VARCHAR2)
IS
STAT     VARCHAR2(100);
FUN      VARCHAR2(4000);
FUN_OLD  VARCHAR2(4000);
FULL_FUN VARCHAR2(4000);
BEGIN
SELECT OLD_COLS(TAB) INTO FUN_OLD FROM DUAL;
SELECT FULL_COLUMNS(TAB) INTO FULL_FUN FROM DUAL;
SELECT COLUM(TAB) INTO FUN FROM DUAL;
STAT := SUBSTR(TAB , 1, 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE TRIGGER I$'||STAT||'
BEFORE UPDATE OF '||FUN||'
ON '||TAB||'
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
INSERT INTO '||P_USER||'.U'||STAT||' ('||FULL_FUN||' ,UPDATE_DATE ,REFERENCE)
VALUES ('||FUN_OLD||', SYSDATE,''OLD'');
END I$'||STAT||';');
END INSERT_TRIGGERS_MAN;

PROCEDURE UPDATE_TRIGGERS
(P_USER VARCHAR2)
IS
CURSOR PRO IS
SELECT TABLE_NAME
FROM USER_TABLES
WHERE TABLE_NAME NOT IN('ALL_TABLES_COLUMNS','CURRENT_TABLES');
TAB      VARCHAR2(60);
STAT     VARCHAR2(60);
FUN      VARCHAR2(4000);
FUN_NEW  VARCHAR2(4000);
FULL_FUN VARCHAR2(4000);
BEGIN
OPEN PRO;
LOOP FETCH PRO INTO TAB;
EXIT WHEN PRO%NOTFOUND;
STAT := SUBSTR(TAB, 1, 28);
SELECT COLUM(TAB) INTO FUN FROM DUAL;
SELECT FULL_COLUMNS(TAB) INTO FULL_FUN FROM DUAL;
SELECT NEW_COLS(TAB) INTO FUN_NEW FROM DUAL;
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE TRIGGER U$'||STAT||'
AFTER UPDATE OF '||FUN||'
ON '||TAB||'
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
INSERT INTO '||P_USER||'.U'||STAT||' ('||FULL_FUN||' , UPDATE_DATE,REFERENCE)
VALUES ('||FUN_NEW||',  SYSDATE,''NEW'');
UPDATE '||P_USER||'.U'||STAT||'
SET UPDATE_ALL = (SELECT MAX(UPDATE_DATE) FROM '||P_USER||'.U'||STAT||');
END U$'||STAT||';');
END LOOP;
CLOSE PRO;
END UPDATE_TRIGGERS;

PROCEDURE UPDATE_TRIGGERS_MAN
(TAB VARCHAR2, P_USER VARCHAR2)
IS
STAT     VARCHAR2(60);
FUN      VARCHAR2(4000);
FUN_NEW  VARCHAR2(4000);
FULL_FUN VARCHAR2(4000);
BEGIN
STAT := SUBSTR(TAB, 1, 28);
SELECT COLUM(TAB) INTO FUN FROM DUAL;
SELECT FULL_COLUMNS(TAB) INTO FULL_FUN FROM DUAL;
SELECT NEW_COLS(TAB) INTO FUN_NEW FROM DUAL;
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE TRIGGER U$'||STAT||'
AFTER UPDATE OF '||FUN||'
ON '||TAB||'
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
INSERT INTO '||P_USER||'.U'||STAT||' ('||FULL_FUN||' , UPDATE_DATE,REFERENCE)
VALUES ('||FUN_NEW||',  SYSDATE,''NEW'');
UPDATE '||P_USER||'.U'||STAT||'
SET UPDATE_ALL = (SELECT MAX(UPDATE_DATE) FROM '||P_USER||'.U'||STAT||');
END U$'||STAT||';');
END UPDATE_TRIGGERS_MAN;

PROCEDURE DELETE_TRIGGERS
(P_USER VARCHAR2)
IS
CURSOR PRO IS
SELECT TABLE_NAME
FROM USER_TABLES
WHERE TABLE_NAME NOT IN('ALL_TABLES_COLUMNS','CURRENT_TABLES');
TAB  VARCHAR2(60);
STAT VARCHAR2(60);
FUN     VARCHAR2(4000);
FUN_OLD VARCHAR2(4000);
BEGIN
OPEN PRO;
LOOP FETCH PRO INTO TAB;
EXIT WHEN PRO%NOTFOUND;
STAT := SUBSTR(TAB, 1, 28);
SELECT FULL_COLUMNS(TAB) INTO FUN FROM DUAL;
SELECT OLD_COLS(TAB) INTO FUN_OLD FROM DUAL;
DBMS_UTILITY.EXEC_DDL_STATEMENT
('CREATE OR REPLACE TRIGGER D$'||STAT||'
AFTER DELETE ON '||TAB||'
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
INSERT INTO '||P_USER||'.D'||STAT||' ('||FUN||' , DELETE_DATEE, REFERENCE)
VALUES ('||FUN_OLD||' , SYSDATE, ''OLD'');
END D$'||STAT||';');
END LOOP;
CLOSE PRO;
END DELETE_TRIGGERS;

PROCEDURE DELETE_TRIGGERS_MAN
(TAB VARCHAR2, P_USER VARCHAR2)
IS
STAT VARCHAR2(60);
FUN     VARCHAR2(1500);
FUN_OLD VARCHAR2(2500);
BEGIN
STAT := SUBSTR(TAB, 1, 28);
SELECT FULL_COLUMNS(TAB) INTO FUN FROM DUAL;
SELECT OLD_COLS(TAB) INTO FUN_OLD FROM DUAL;
DBMS_UTILITY.EXEC_DDL_STATEMENT
('CREATE OR REPLACE TRIGGER D$'||STAT||'
AFTER DELETE ON '||TAB||'
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
INSERT INTO '||P_USER||'.D'||STAT||' ('||FUN||' , DELETE_DATEE, REFERENCE)
VALUES ('||FUN_OLD||' , SYSDATE, ''OLD'');
END D$'||STAT||';');
END DELETE_TRIGGERS_MAN;

PROCEDURE
DELETE_UPDATE_INSERT_PROCEDURE
(P_USER varchar2 , A_USER VARCHAR2)
IS

PRO SYS_REFCURSOR;

STATEMENT VARCHAR2(1000) :='SELECT TABLE_NAME FROM '||P_USER||'.CURRENT_TABLES WHERE TABLE_NAME NOT IN(''ALL_TABLES_COLUMNS'',''CURRENT_TABLES'')';
TAB VARCHAR2(100);
STAT VARCHAR2(50);

FUN_P VARCHAR2(2000);

FUN_A       VARCHAR2(4000);
FUN_V_A     VARCHAR2(4000);
FUN_V_FUN_A VARCHAR2(4000);

BEGIN
OPEN PRO FOR STATEMENT;
LOOP FETCH PRO INTO TAB;
EXIT WHEN PRO%NOTFOUND;
SELECT PACKETS.COLUMNS2_PROS(TAB, P_USER) INTO FUN_P FROM DUAL;
SELECT PACKETS.FULL_COLUMNS_PROS(TAB, P_USER) INTO FUN_A FROM DUAL;
SELECT PACKETS.V_COLUMNS_PROS(TAB, P_USER) INTO FUN_V_A FROM DUAL;
SELECT PACKETS.COLUMNS_V_COLUMNS_PROS(TAB, P_USER) INTO FUN_V_FUN_A FROM DUAL;

STAT := SUBSTR(TAB, 1 , 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE P$'||STAT||'
IS

CURSOR D IS
SELECT AUD.INSERT_DATE , AUD.ROW_NO
FROM '||A_USER||'.D'||STAT||' AUD , '||TAB||'@'||P_USER||' RMT
WHERE AUD.INSERT_DATE = RMT.INSERT_DATE;

K '||P_USER||'.'||TAB||'%ROWTYPE;

CURSOR A IS
SELECT MAX(UPDATE_DATE) , ROW_NO , SEQ_NO
FROM '||A_USER||'.U'||STAT||'
WHERE REFERENCE = ''NEW'' AND
UPDATE_ALL > (SELECT MAX(NVL(UPDATE_DATE,TO_DATE(''12-07-1282'',''DD-MM-YYYY'')))
FROM '||TAB||'@'||P_USER||')
GROUP BY  ROW_NO , SEQ_NO;

C '||A_USER||'.U'||STAT||'%ROWTYPE;
V '||A_USER||'.U'||STAT||'%ROWTYPE;

UPD_NUM NUMBER;

N NUMBER;
R NUMBER;

BEGIN

------------------
--DELETE SECTION :
------------------

SELECT COUNT(*) INTO N
FROM '||A_USER||'.D'||STAT||' AUD ,
'||TAB||'@'||P_USER||' RMT
WHERE AUD.INSERT_DATE = RMT.INSERT_DATE;

IF N > 0 THEN

OPEN D;
LOOP FETCH D INTO K.INSERT_DATE , K.ROW_NO;
EXIT WHEN  D%NOTFOUND;

DELETE '||TAB||'@'||P_USER||'
where INSERT_DATE=K.INSERT_DATE AND ROW_NO = K.ROW_NO;
commit;

END LOOP;
CLOSE D;

END IF;

------------------
--UPDATE SECTION :
------------------


SELECT COUNT(MAX(UPDATE_DATE)) INTO UPD_NUM
FROM '||A_USER||'.U'||STAT||'
WHERE REFERENCE = ''NEW'' AND
UPDATE_ALL > (SELECT MAX(NVL(UPDATE_DATE,TO_DATE(''12-07-1282'',''DD-MM-YYYY'')))
FROM '||TAB||'@'||P_USER||')
GROUP BY ROW_NO ;

IF UPD_NUM > 0 THEN

SELECT MAX(UPDATE_ALL) INTO V.UPDATE_ALL
FROM '||A_USER||'.U'||STAT||';

OPEN A ;
LOOP FETCH A INTO C.UPDATE_DATE , C.ROW_NO , C.SEQ_NO;
EXIT WHEN  A%NOTFOUND;

SELECT '||FUN_A||' INTO '||FUN_V_A||'
FROM '||A_USER||'.U'||STAT||'
WHERE UPDATE_DATE = C.UPDATE_DATE
AND ROW_NO = C.ROW_NO
AND SEQ_NO = C.SEQ_NO
AND REFERENCE = ''NEW'';

UPDATE '||TAB||'@'||P_USER||'
SET '||FUN_V_FUN_A||'
WHERE INSERT_DATE = V.INSERT_DATE AND ROW_NO = V.ROW_NO;
COMMIT;

END LOOP;
CLOSE A;

UPDATE '||TAB||'@'||P_USER||'
SET UPDATE_DATE =  V.UPDATE_ALL;
COMMIT;

END IF;

------------------
--INSERT SECTION :
------------------

SELECT COUNT(*) INTO N
FROM '||P_USER||'.'||TAB||'
WHERE INSERT_DATE >= (SELECT MAX(INSERT_DATE) FROM '||TAB||'@'||P_USER||');

SELECT COUNT(*) INTO R
FROM '||P_USER||'.'||TAB||'@'||p_user||';

IF R = 0 THEN

INSERT INTO '||TAB||'@'||p_user||' ('||FUN_P||', insert_date)
SELECT '||FUN_P||', insert_date
FROM '||P_USER||'.'||TAB||';
commit;

END IF;

if n > 0 then

INSERT INTO '||TAB||'@'||p_user||'
('||FUN_P||',INSERT_DATE)
SELECT '||FUN_P||',INSERT_DATE
FROM '||P_USER||'.'||TAB||'
WHERE INSERT_DATE >(SELECT MAX(INSERT_DATE)
FROM '||TAB||'@'||p_user||');
COMMIT;

END IF;

EXCEPTION
WHEN OTHERS THEN
NULL;

END P$'||STAT||';');
END LOOP;
CLOSE PRO;
END DELETE_UPDATE_INSERT_PROCEDURE;


PROCEDURE
DELETE_UPDATE_INSERT_PRO_TH2
(P_USER varchar2 , C_USER varchar2 , A_USER VARCHAR2)
IS

PRO SYS_REFCURSOR;

STATEMENT VARCHAR2(1000) :='SELECT TABLE_NAME FROM '||C_USER||'.CURRENT_TABLES WHERE TABLE_NAME NOT IN(''ALL_TABLES_COLUMNS'',''CURRENT_TABLES'')';
TAB VARCHAR2(100);
STAT VARCHAR2(50);

FUN_P VARCHAR2(2000);

FUN_A       VARCHAR2(4000);
FUN_V_A     VARCHAR2(4000);
FUN_V_FUN_A VARCHAR2(4000);

BEGIN
OPEN PRO FOR STATEMENT;
LOOP FETCH PRO INTO TAB;
EXIT WHEN PRO%NOTFOUND;
SELECT PACKETS.COLUMNS2_PROS(TAB, P_USER) INTO FUN_P FROM DUAL;
SELECT PACKETS.FULL_COLUMNS_PROS(TAB, P_USER) INTO FUN_A FROM DUAL;
SELECT PACKETS.V_COLUMNS_PROS(TAB, P_USER) INTO FUN_V_A FROM DUAL;
SELECT PACKETS.COLUMNS_V_COLUMNS_PROS(TAB, P_USER) INTO FUN_V_FUN_A FROM DUAL;

STAT := SUBSTR(TAB, 1 , 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE Y$'||STAT||'
IS

CURSOR D IS
SELECT AUD.INSERT_DATE , AUD.ROW_NO
FROM '||A_USER||'.D'||STAT||' AUD , '||TAB||'@'||P_USER||' RMT
WHERE AUD.INSERT_DATE = RMT.INSERT_DATE;

K '||C_USER||'.'||TAB||'%ROWTYPE;

CURSOR A IS
SELECT MAX(UPDATE_DATE) , ROW_NO , SEQ_NO
FROM '||A_USER||'.U'||STAT||'
WHERE REFERENCE = ''NEW'' AND
UPDATE_ALL > (SELECT MAX(NVL(UPDATE_DATE,TO_DATE(''12-07-1282'',''DD-MM-YYYY'')))
FROM '||TAB||'@'||P_USER||')
GROUP BY  ROW_NO , SEQ_NO;

C '||A_USER||'.U'||STAT||'%ROWTYPE;
V '||A_USER||'.U'||STAT||'%ROWTYPE;

UPD_NUM NUMBER;

N NUMBER;
R NUMBER;

BEGIN

------------------
--DELETE SECTION :
------------------

SELECT COUNT(*) INTO N
FROM '||A_USER||'.D'||STAT||' AUD ,
'||TAB||'@'||P_USER||' RMT
WHERE AUD.INSERT_DATE = RMT.INSERT_DATE;

IF N > 0 THEN

OPEN D;
LOOP FETCH D INTO K.INSERT_DATE , K.ROW_NO;
EXIT WHEN  D%NOTFOUND;

DELETE '||TAB||'@'||P_USER||'
where INSERT_DATE=K.INSERT_DATE AND ROW_NO = K.ROW_NO;
commit;

END LOOP;
CLOSE D;

END IF;

------------------
--UPDATE SECTION :
------------------


SELECT COUNT(MAX(UPDATE_DATE)) INTO UPD_NUM
FROM '||A_USER||'.U'||STAT||'
WHERE REFERENCE = ''NEW'' AND
UPDATE_ALL > (SELECT MAX(NVL(UPDATE_DATE,TO_DATE(''12-07-1282'',''DD-MM-YYYY'')))
FROM '||TAB||'@'||P_USER||')
GROUP BY ROW_NO ;

IF UPD_NUM > 0 THEN

SELECT MAX(UPDATE_ALL) INTO V.UPDATE_ALL
FROM '||A_USER||'.U'||STAT||';

OPEN A ;
LOOP FETCH A INTO C.UPDATE_DATE , C.ROW_NO , C.SEQ_NO;
EXIT WHEN  A%NOTFOUND;

SELECT '||FUN_A||' INTO '||FUN_V_A||'
FROM '||A_USER||'.U'||STAT||'
WHERE UPDATE_DATE = C.UPDATE_DATE
AND ROW_NO = C.ROW_NO
AND SEQ_NO = C.SEQ_NO
AND REFERENCE = ''NEW'';

UPDATE '||TAB||'@'||P_USER||'
SET '||FUN_V_FUN_A||'
WHERE INSERT_DATE = V.INSERT_DATE AND ROW_NO = V.ROW_NO;
COMMIT;

END LOOP;
CLOSE A;

UPDATE '||TAB||'@'||P_USER||'
SET UPDATE_DATE =  V.UPDATE_ALL;
COMMIT;

END IF;

------------------
--INSERT SECTION :
------------------

SELECT COUNT(*) INTO N
FROM '||C_USER||'.'||TAB||'
WHERE INSERT_DATE >= (SELECT MAX(INSERT_DATE) FROM '||TAB||'@'||P_USER||');

SELECT COUNT(*) INTO R
FROM '||C_USER||'.'||TAB||'@'||p_user||';

IF R = 0 THEN

INSERT INTO '||TAB||'@'||p_user||' ('||FUN_P||', insert_date)
SELECT '||FUN_P||', insert_date
FROM '||C_USER||'.'||TAB||';
commit;

END IF;

if n > 0 then

INSERT INTO '||TAB||'@'||p_user||'
('||FUN_P||',INSERT_DATE)
SELECT '||FUN_P||',INSERT_DATE
FROM '||C_USER||'.'||TAB||'
WHERE INSERT_DATE >(SELECT MAX(INSERT_DATE)
FROM '||TAB||'@'||p_user||');
COMMIT;

END IF;

EXCEPTION
WHEN OTHERS THEN
NULL;

END Y$'||STAT||';');
END LOOP;
CLOSE PRO;
END DELETE_UPDATE_INSERT_PRO_TH2;

PROCEDURE
DELETE_UPDATE_INSERT_PRO_MAN
(TAB VARCHAR2, P_USER varchar2 , A_USER VARCHAR2)
IS
STAT VARCHAR2(50);

FUN_P VARCHAR2(2000);

FUN_A       VARCHAR2(4000);
FUN_V_A     VARCHAR2(4000);
FUN_V_FUN_A VARCHAR2(4000);

BEGIN

SELECT PACKETS.COLUMNS2_PROS(TAB, P_USER) INTO FUN_P FROM DUAL;
SELECT PACKETS.FULL_COLUMNS_PROS(TAB, P_USER) INTO FUN_A FROM DUAL;
SELECT PACKETS.V_COLUMNS_PROS(TAB, P_USER) INTO FUN_V_A FROM DUAL;
SELECT PACKETS.COLUMNS_V_COLUMNS_PROS(TAB, P_USER) INTO FUN_V_FUN_A FROM DUAL;

STAT := SUBSTR(TAB, 1 , 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE P$'||STAT||'
IS

CURSOR D IS
SELECT AUD.INSERT_DATE , AUD.ROW_NO
FROM '||A_USER||'.D'||STAT||' AUD , '||TAB||'@'||P_USER||' RMT
WHERE AUD.INSERT_DATE = RMT.INSERT_DATE;

K '||P_USER||'.'||TAB||'%ROWTYPE;

CURSOR A IS
SELECT MAX(UPDATE_DATE) , ROW_NO , SEQ_NO
FROM '||A_USER||'.U'||STAT||'
WHERE REFERENCE = ''NEW'' AND
UPDATE_ALL > (SELECT MAX(NVL(UPDATE_DATE,TO_DATE(''12-07-1282'',''DD-MM-YYYY'')))
FROM '||TAB||'@'||P_USER||')
GROUP BY  ROW_NO , SEQ_NO;

C '||A_USER||'.U'||STAT||'%ROWTYPE;
V '||A_USER||'.U'||STAT||'%ROWTYPE;

UPD_NUM NUMBER;

N NUMBER;
R NUMBER;

BEGIN

------------------
--DELETE SECTION :
------------------

SELECT COUNT(*) INTO N
FROM '||A_USER||'.D'||STAT||' AUD ,
'||TAB||'@'||P_USER||' RMT
WHERE AUD.INSERT_DATE = RMT.INSERT_DATE;

IF N > 0 THEN

OPEN D;
LOOP FETCH D INTO K.INSERT_DATE , K.ROW_NO;
EXIT WHEN  D%NOTFOUND;

DELETE '||TAB||'@'||P_USER||'
where INSERT_DATE=K.INSERT_DATE AND ROW_NO = K.ROW_NO;
commit;

END LOOP;
CLOSE D;

END IF;

------------------
--UPDATE SECTION :
------------------


SELECT COUNT(MAX(UPDATE_DATE)) INTO UPD_NUM
FROM '||A_USER||'.U'||STAT||'
WHERE REFERENCE = ''NEW'' AND
UPDATE_ALL > (SELECT MAX(NVL(UPDATE_DATE,TO_DATE(''12-07-1282'',''DD-MM-YYYY'')))
FROM '||TAB||'@'||P_USER||')
GROUP BY ROW_NO ;

IF UPD_NUM > 0 THEN

SELECT MAX(UPDATE_ALL) INTO V.UPDATE_ALL
FROM '||A_USER||'.U'||STAT||';

OPEN A ;
LOOP FETCH A INTO C.UPDATE_DATE , C.ROW_NO , C.SEQ_NO;
EXIT WHEN  A%NOTFOUND;

SELECT '||FUN_A||' INTO '||FUN_V_A||'
FROM '||A_USER||'.U'||STAT||'
WHERE UPDATE_DATE = C.UPDATE_DATE
AND ROW_NO = C.ROW_NO
AND SEQ_NO = C.SEQ_NO
AND REFERENCE = ''NEW'';

UPDATE '||TAB||'@'||P_USER||'
SET '||FUN_V_FUN_A||'
WHERE INSERT_DATE = V.INSERT_DATE AND ROW_NO = V.ROW_NO;
COMMIT;

END LOOP;
CLOSE A;

UPDATE '||TAB||'@'||P_USER||'
SET UPDATE_DATE =  V.UPDATE_ALL;
COMMIT;

END IF;

------------------
--INSERT SECTION :
------------------

SELECT COUNT(*) INTO N
FROM '||P_USER||'.'||TAB||'
WHERE INSERT_DATE >= (SELECT MAX(INSERT_DATE) FROM '||TAB||'@'||P_USER||');

SELECT COUNT(*) INTO R
FROM '||P_USER||'.'||TAB||'@'||p_user||';

IF R = 0 THEN

INSERT INTO '||TAB||'@'||p_user||' ('||FUN_P||', insert_date)
SELECT '||FUN_P||', insert_date
FROM '||P_USER||'.'||TAB||';
commit;

END IF;

if n > 0 then

INSERT INTO '||TAB||'@'||p_user||'
('||FUN_P||',INSERT_DATE)
SELECT '||FUN_P||',INSERT_DATE
FROM '||P_USER||'.'||TAB||'
WHERE INSERT_DATE >(SELECT MAX(INSERT_DATE)
FROM '||TAB||'@'||p_user||');
COMMIT;

END IF;

EXCEPTION
WHEN OTHERS THEN
NULL;

END P$'||STAT||';');
END DELETE_UPDATE_INSERT_PRO_MAN;

PROCEDURE
DELETE_UPDATE_INSERT_MAN_TH2
(TAB VARCHAR2 ,P_USER varchar2 , C_USER varchar2 , A_USER VARCHAR2)
IS

STAT        VARCHAR2(40);
FUN_P       VARCHAR2(2000);

FUN_A       VARCHAR2(4000);
FUN_V_A     VARCHAR2(4000);
FUN_V_FUN_A VARCHAR2(4000);

BEGIN

SELECT PACKETS.COLUMNS2_PROS(TAB, P_USER) INTO FUN_P FROM DUAL;
SELECT PACKETS.FULL_COLUMNS_PROS(TAB, P_USER) INTO FUN_A FROM DUAL;
SELECT PACKETS.V_COLUMNS_PROS(TAB, P_USER) INTO FUN_V_A FROM DUAL;
SELECT PACKETS.COLUMNS_V_COLUMNS_PROS(TAB, P_USER) INTO FUN_V_FUN_A FROM DUAL;

STAT := SUBSTR(TAB, 1 , 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE Y$'||STAT||'
IS

CURSOR D IS
SELECT AUD.INSERT_DATE , AUD.ROW_NO
FROM '||A_USER||'.D'||STAT||' AUD , '||TAB||'@'||P_USER||' RMT
WHERE AUD.INSERT_DATE = RMT.INSERT_DATE;

K '||C_USER||'.'||TAB||'%ROWTYPE;

CURSOR A IS
SELECT MAX(UPDATE_DATE) , ROW_NO , SEQ_NO
FROM '||A_USER||'.U'||STAT||'
WHERE REFERENCE = ''NEW'' AND
UPDATE_ALL > (SELECT MAX(NVL(UPDATE_DATE,TO_DATE(''12-07-1282'',''DD-MM-YYYY'')))
FROM '||TAB||'@'||P_USER||')
GROUP BY  ROW_NO , SEQ_NO;

C '||A_USER||'.U'||STAT||'%ROWTYPE;
V '||A_USER||'.U'||STAT||'%ROWTYPE;

UPD_NUM NUMBER;

N NUMBER;
R NUMBER;

BEGIN

------------------
--DELETE SECTION :
------------------

SELECT COUNT(*) INTO N
FROM '||A_USER||'.D'||STAT||' AUD ,
'||TAB||'@'||P_USER||' RMT
WHERE AUD.INSERT_DATE = RMT.INSERT_DATE;

IF N > 0 THEN

OPEN D;
LOOP FETCH D INTO K.INSERT_DATE , K.ROW_NO;
EXIT WHEN  D%NOTFOUND;

DELETE '||TAB||'@'||P_USER||'
where INSERT_DATE=K.INSERT_DATE AND ROW_NO = K.ROW_NO;
commit;

END LOOP;
CLOSE D;

END IF;

------------------
--UPDATE SECTION :
------------------


SELECT COUNT(MAX(UPDATE_DATE)) INTO UPD_NUM
FROM '||A_USER||'.U'||STAT||'
WHERE REFERENCE = ''NEW'' AND
UPDATE_ALL > (SELECT MAX(NVL(UPDATE_DATE,TO_DATE(''12-07-1282'',''DD-MM-YYYY'')))
FROM '||TAB||'@'||P_USER||')
GROUP BY ROW_NO ;

IF UPD_NUM > 0 THEN

SELECT MAX(UPDATE_ALL) INTO V.UPDATE_ALL
FROM '||A_USER||'.U'||STAT||';

OPEN A ;
LOOP FETCH A INTO C.UPDATE_DATE , C.ROW_NO , C.SEQ_NO;
EXIT WHEN  A%NOTFOUND;

SELECT '||FUN_A||' INTO '||FUN_V_A||'
FROM '||A_USER||'.U'||STAT||'
WHERE UPDATE_DATE = C.UPDATE_DATE
AND ROW_NO = C.ROW_NO
AND SEQ_NO = C.SEQ_NO
AND REFERENCE = ''NEW'';

UPDATE '||TAB||'@'||P_USER||'
SET '||FUN_V_FUN_A||'
WHERE INSERT_DATE = V.INSERT_DATE AND ROW_NO = V.ROW_NO;
COMMIT;

END LOOP;
CLOSE A;

UPDATE '||TAB||'@'||P_USER||'
SET UPDATE_DATE =  V.UPDATE_ALL;
COMMIT;

END IF;

------------------
--INSERT SECTION :
------------------

SELECT COUNT(*) INTO N
FROM '||C_USER||'.'||TAB||'
WHERE INSERT_DATE >= (SELECT MAX(INSERT_DATE) FROM '||TAB||'@'||P_USER||');

SELECT COUNT(*) INTO R
FROM '||C_USER||'.'||TAB||'@'||p_user||';

IF R = 0 THEN

INSERT INTO '||TAB||'@'||p_user||' ('||FUN_P||', insert_date)
SELECT '||FUN_P||', insert_date
FROM '||C_USER||'.'||TAB||';
commit;

END IF;

if n > 0 then

INSERT INTO '||TAB||'@'||p_user||'
('||FUN_P||',INSERT_DATE)
SELECT '||FUN_P||',INSERT_DATE
FROM '||C_USER||'.'||TAB||'
WHERE INSERT_DATE >(SELECT MAX(INSERT_DATE)
FROM '||TAB||'@'||p_user||');
COMMIT;

END IF;

EXCEPTION
WHEN OTHERS THEN
NULL;

END Y$'||STAT||';');
END DELETE_UPDATE_INSERT_MAN_TH2;



PROCEDURE PACKET_JOBS
(P_TIME VARCHAR2)
IS
CURSOR I IS
SELECT OBJECT_NAME
FROM USER_OBJECTS
WHERE OBJECT_NAME LIKE 'P$_%'
AND OBJECT_TYPE='PROCEDURE';
PRO VARCHAR2(40);
JOBS NUMBER;
BEGIN
OPEN I;
LOOP FETCH I INTO PRO;
EXIT WHEN I%NOTFOUND;
DBMS_JOB.SUBMIT(JOB=>JOBS, WHAT=>'BEGIN
'||PRO||';
END;',
NEXT_DATE=>SYSDATE +1/24/60/60,
INTERVAL=>'SYSDATE +'||P_TIME||'/24/60',
FORCE=>TRUE);
dbms_job.run(job=>jOBS);
END LOOP;
CLOSE I;
END PACKET_JOBS;

PROCEDURE PACKET_JOBS_TH2
(P_TIME VARCHAR2)
IS
CURSOR I IS
SELECT OBJECT_NAME
FROM USER_OBJECTS
WHERE OBJECT_NAME LIKE 'Y$_%'
AND OBJECT_TYPE='PROCEDURE';
PRO VARCHAR2(40);
JOBS NUMBER;
BEGIN
OPEN I;
LOOP FETCH I INTO PRO;
EXIT WHEN I%NOTFOUND;
DBMS_JOB.SUBMIT(JOB=>JOBS, WHAT=>'BEGIN
'||PRO||';
END;',
NEXT_DATE=>SYSDATE +1/24/60/60,
INTERVAL=>'SYSDATE +'||P_TIME||'/24/60',
FORCE=>TRUE);
dbms_job.run(job=>jOBS);
END LOOP;
CLOSE I;
END PACKET_JOBS_TH2;


PROCEDURE CREATE_VIEWS
IS
CURSOR PRO IS
SELECT TABLE_NAME FROM USER_TABLES;
TAB  VARCHAR2(40);
STAT VARCHAR2(40);
BEGIN
OPEN PRO;
LOOP FETCH PRO INTO TAB;
EXIT WHEN PRO%NOTFOUND;
STAT := SUBSTR(TAB , 1 , 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE VIEW F$'||STAT||' AS SELECT ROWID ROW_ID , ROWNUM ROW_NO
FROM '||TAB);
END LOOP;
CLOSE PRO;
END CREATE_VIEWS;

PROCEDURE CREATE_VIEWS_MAN
(TAB  VARCHAR2)
IS
STAT VARCHAR2(40);
BEGIN
STAT := SUBSTR(TAB , 1 , 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE VIEW F$'||STAT||' AS SELECT ROWID ROW_ID , ROWNUM ROW_NO
FROM '||TAB);
END CREATE_VIEWS_MAN;

PROCEDURE UPDATE_ROW_NO
IS
CURSOR U IS
SELECT TABLE_NAME
FROM USER_TABLES
WHERE TABLE_NAME NOT IN('ALL_TABLES_COLUMNS','CURRENT_TABLES');
TAB  VARCHAR2(50);
STAT VARCHAR2(50);
BEGIN
OPEN U;
LOOP FETCH U INTO TAB;
EXIT WHEN  U%NOTFOUND;
STAT := SUBSTR(TAB , 1 , 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE S$'||STAT||'
Is
Cursor I IS
SELECT F.ROW_ID
FROM F$'||STAT||' F , '||TAB||' TAB
WHERE TAB.ROW_NO IS NULL
AND F.ROW_ID = TAB.ROWID;
V F$'||STAT||'%ROWTYPE;
A number;
N number;
T number;
Begin
SELECT COUNT(*) INTO N
FROM '||TAB||'
WHERE ROW_NO IS NULL;
SELECT COUNT(*) INTO A
FROM '||TAB||';
T := A - N;
Open I;
LOOP FETCH I INTO v.ROW_ID;
EXIT WHEN I%NOTFOUND;
T := T + 1;
UPDATE '||TAB||'
SET ROW_NO = T
WHERE ROWID = v.ROW_ID;
END LOOP;
CLOSE I;
EXCEPTION WHEN OTHERS THEN
CLOSE I;
SELECT MAX(ROW_NO) INTO T
FROM '||TAB||';
Open I;
LOOP FETCH I INTO v.ROW_ID;
EXIT WHEN I%NOTFOUND;
T := T + 1;
UPDATE '||TAB||'
SET ROW_NO = T
WHERE ROWID = v.ROW_ID;
END LOOP;
CLOSE I;
End S$'||STAT||';');
END LOOP;
CLOSE U;
END UPDATE_ROW_NO;


PROCEDURE UPDATE_SEQ_NO
IS
CURSOR U IS
SELECT TABLE_NAME
FROM USER_TABLES
WHERE TABLE_NAME NOT IN('ALL_TABLES_COLUMNS','CURRENT_TABLES');
TAB  VARCHAR2(50);
STAT VARCHAR2(50);
BEGIN
OPEN U;
LOOP FETCH U INTO TAB;
EXIT WHEN  U%NOTFOUND;
STAT := SUBSTR(TAB , 1 , 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE S$'||STAT||'
Is
Cursor I IS
SELECT F.ROW_ID
FROM F$'||STAT||' F , '||TAB||' TAB
WHERE TAB.SEQ_NO IS NULL
AND F.ROW_ID = TAB.ROWID;
V F$'||STAT||'%ROWTYPE;
A number;
N number;
T number;
Begin
SELECT COUNT(*) INTO N
FROM '||TAB||'
WHERE SEQ_NO IS NULL;
SELECT COUNT(*) INTO A
FROM '||TAB||';
T := A - N;
Open I;
LOOP FETCH I INTO v.ROW_ID;
EXIT WHEN I%NOTFOUND;
T := T + 1;
UPDATE '||TAB||'
SET SEQ_NO = T
WHERE ROWID = v.ROW_ID;
END LOOP;
CLOSE I;
EXCEPTION WHEN OTHERS THEN
CLOSE I;
SELECT MAX(SEQ_NO) INTO T
FROM '||TAB||';
Open I;
LOOP FETCH I INTO v.ROW_ID;
EXIT WHEN I%NOTFOUND;
T := T + 1;
UPDATE '||TAB||'
SET SEQ_NO = T
WHERE ROWID = v.ROW_ID;
END LOOP;
CLOSE I;
End S$'||STAT||';');
END LOOP;
CLOSE U;
END UPDATE_SEQ_NO;

PROCEDURE UPDATE_ROW_NO_MAN
(TAB VARCHAR2)
IS
STAT VARCHAR2(50);
BEGIN
STAT := SUBSTR(TAB , 1 , 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE S$'||STAT||'
Is
Cursor I IS
SELECT F.ROW_ID
FROM F$'||STAT||' F , '||TAB||' TAB
WHERE TAB.ROW_NO IS NULL
AND F.ROW_ID = TAB.ROWID;
V F$'||STAT||'%ROWTYPE;
A number;
N number;
T number;
Begin
SELECT COUNT(*) INTO N
FROM '||TAB||'
WHERE ROW_NO IS NULL;
SELECT COUNT(*) INTO A
FROM '||TAB||';
T := A - N;
Open I;
LOOP FETCH I INTO v.ROW_ID;
EXIT WHEN I%NOTFOUND;
T := T + 1;
UPDATE '||TAB||'
SET ROW_NO = T
WHERE ROWID = v.ROW_ID;
END LOOP;
CLOSE I;
EXCEPTION WHEN OTHERS THEN
CLOSE I;
SELECT MAX(ROW_NO) INTO T
FROM '||TAB||';
Open I;
LOOP FETCH I INTO v.ROW_ID;
EXIT WHEN I%NOTFOUND;
T := T + 1;
UPDATE '||TAB||'
SET ROW_NO = T
WHERE ROWID = v.ROW_ID;
END LOOP;
CLOSE I;
End S$'||STAT||';');
END UPDATE_ROW_NO_MAN;


PROCEDURE ROW_NO_TRIGGERS
IS
CURSOR U IS
SELECT TABLE_NAME
FROM USER_TABLES
WHERE TABLE_NAME NOT IN('ALL_TABLES_COLUMNS','CURRENT_TABLES');
TAB  VARCHAR2(50);
STAT VARCHAR2(50);
BEGIN
OPEN U;
LOOP FETCH U INTO TAB;
EXIT WHEN  U%NOTFOUND;
STAT := SUBSTR(TAB , 1 , 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE TRIGGER T$'||STAT||'
AFTER INSERT ON '||TAB||'
BEGIN
S$'||STAT||';
END T$'||STAT||';');
END LOOP;
CLOSE U;
END ROW_NO_TRIGGERS;

PROCEDURE SEQ_NO_TRIGGERS
IS
CURSOR U IS
SELECT TABLE_NAME
FROM USER_TABLES
WHERE TABLE_NAME NOT IN('ALL_TABLES_COLUMNS','CURRENT_TABLES');
TAB  VARCHAR2(50);
STAT VARCHAR2(50);
BEGIN
OPEN U;
LOOP FETCH U INTO TAB;
EXIT WHEN  U%NOTFOUND;
STAT := SUBSTR(TAB , 1 , 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE TRIGGER T$'||STAT||'
AFTER INSERT ON '||TAB||'
BEGIN
S$'||STAT||';
END T$'||STAT||';');
END LOOP;
CLOSE U;
END SEQ_NO_TRIGGERS;

PROCEDURE ROW_NO_TRIGGERS_MAN
(TAB VARCHAR2)
IS
STAT VARCHAR2(50);
BEGIN
STAT := SUBSTR(TAB , 1 , 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE TRIGGER T$'||STAT||'
AFTER INSERT ON '||TAB||'
BEGIN
S$'||STAT||';
END T$'||STAT||';');
END ROW_NO_TRIGGERS_MAN;

PROCEDURE CREATE_VIEWS_ALTER_ROW_NO
IS

CURSOR I IS
  SELECT TABLE_NAME
  FROM USER_TABLES;

TAB VARCHAR2(50);
STAT VARCHAR2(40);
RW NUMBER :=0;
ID NUMBER :=0;

BEGIN

OPEN I;
LOOP FETCH I INTO TAB;
EXIT WHEN  I%NOTFOUND;

STAT := SUBSTR(TAB, 1 ,28);

DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE VIEW F$'||STAT||' AS SELECT ROWID V_ROW_ID , ROWNUM V_ROW_NO FROM '||TAB);

SELECT COUNT(*) INTO RW FROM USER_TAB_COLUMNS
WHERE TABLE_NAME=TAB AND COLUMN_NAME = 'ROW_NO';
IF RW = 0 THEN
DBMS_UTILITY.EXEC_DDL_STATEMENT('
ALTER TABLE '||TAB||' ADD ROW_NO NUMBER UNIQUE');
END IF;

SELECT COUNT(*) INTO ID FROM USER_TAB_COLUMNS
WHERE TABLE_NAME=TAB AND COLUMN_NAME = 'INSERT_DATE';
IF ID = 0 THEN
DBMS_UTILITY.EXEC_DDL_STATEMENT('
ALTER TABLE '||TAB||' ADD INSERT_DATE DATE DEFAULT SYSDATE');
END IF;

END LOOP;
CLOSE I;

OPEN I;
LOOP FETCH I INTO TAB;
EXIT WHEN  I%NOTFOUND;

STAT := SUBSTR(TAB, 1 ,28);

DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE O$'||STAT||'
IS
CURSOR U IS
SELECT V_ROW_ID , V_ROW_NO
FROM F$'||STAT||';
V_V_ROW_ID VARCHAR2(200);
V_V_ROW_NO NUMBER;
BEGIN
OPEN U;
LOOP FETCH U INTO V_V_ROW_ID , V_V_ROW_NO;
EXIT WHEN  U%NOTFOUND;

UPDATE '||TAB||' SET ROW_NO = V_V_ROW_NO
WHERE ROWID = V_V_ROW_ID;
COMMIT;

END LOOP;
CLOSE U;
END O$'||STAT||';');
END LOOP;
CLOSE I;

END CREATE_VIEWS_ALTER_ROW_NO;

PROCEDURE REMOVE_L$_E$_M$_O$_Q$
IS
CURSOR I IS
SELECT OBJECT_NAME
FROM USER_OBJECTS
WHERE OBJECT_TYPE = 'PROCEDURE'
AND OBJECT_NAME LIKE '%O$_%'
OR OBJECT_NAME LIKE '%E$_%'
OR OBJECT_NAME LIKE '%M$_%'
OR OBJECT_NAME LIKE '%L$_%'
OR OBJECT_NAME LIKE '%Q$_%';
OBJ VARCHAR2(40);
BEGIN
OPEN I;
LOOP FETCH I INTO OBJ;
EXIT WHEN I%NOTFOUND;
DBMS_UTILITY.EXEC_DDL_STATEMENT('DROP PROCEDURE '||OBJ);
END LOOP;
CLOSE I;
END REMOVE_L$_E$_M$_O$_Q$;

PROCEDURE REMOVE_VIEWS
IS
CURSOR I IS
SELECT VIEW_NAME
FROM USER_VIEWS
WHERE VIEW_NAME LIKE '%F$_%';
V   VARCHAR2(40);
BEGIN
OPEN I;
LOOP FETCH I INTO V;
EXIT WHEN I%NOTFOUND;
DBMS_UTILITY.EXEC_DDL_STATEMENT('DROP VIEW '||V);
END LOOP;
CLOSE I;
END REMOVE_VIEWS;

PROCEDURE INSERT_DATE
IS
CURSOR I IS
SELECT TABLE_NAME
FROM USER_TABLES;
TAB  VARCHAR2(50);
STAT VARCHAR2(40);
BEGIN
OPEN I;
LOOP FETCH I INTO TAB;
EXIT WHEN  I%NOTFOUND;
STAT := SUBSTR(TAB , 1 , 28);
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE E$'||STAT||'
IS
BEGIN
FOR I IN 1..235661 LOOP
UPDATE '||TAB||' SET
INSERT_DATE= INSERT_DATE -235661+I
WHERE ROW_NO=I;
commit;
END LOOP;
END E$'||STAT||';');
END LOOP;
CLOSE I;
END INSERT_DATE;

PROCEDURE UPD_RNO
IS
CURSOR I IS
SELECT TABLE_NAME
FROM USER_TABLES
WHERE TABLE_NAME NOT IN('DAM_COM_INDUST'
,'DISTINCT_INSERT_DATE'
,'TABLES_NAMES'
,'TBL_AMANAT_KASHF'
,' INV_TRANSACTION_D_EMP_DETAILS'
,'TBL_NOT_DIRECT'
,'ASSET_BASIC'
,'DAM_COM_INDUST'
,'CURRENT_TABLES');
TAB  VARCHAR2(40);
STAT VARCHAR2(40);
BEGIN
OPEN I;
LOOP FETCH I INTO TAB;
EXIT WHEN  I%NOTFOUND;

STAT := SUBSTR(TAB, 1 ,28);

DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE O$'||STAT||'
IS
CURSOR U IS
SELECT ROW_ID , ROW_NO
FROM F$'||STAT||';
V F$'||STAT||'%ROWTYPE;
BEGIN
OPEN U;
LOOP FETCH U INTO V.ROW_ID , V.ROW_NO;
EXIT WHEN  U%NOTFOUND;

UPDATE '||TAB||' SET ROW_NO = V.ROW_NO
WHERE ROWID = V.ROW_ID;
COMMIT;

END LOOP;
CLOSE U;
END O$'||STAT||';');
END LOOP;
CLOSE I;
END UPD_RNO;

PROCEDURE NUL_RNO
IS
CURSOR I IS
SELECT TABLE_NAME
FROM USER_TABLES
WHERE TABLE_NAME NOT IN('DAM_COM_INDUST'
,'DISTINCT_INSERT_DATE'
,'TABLES_NAMES'
,'TBL_AMANAT_KASHF'
,' INV_TRANSACTION_D_EMP_DETAILS'
,'TBL_NOT_DIRECT'
,'ASSET_BASIC'
,'DAM_COM_INDUST'
,'CURRENT_TABLES');
TAB  VARCHAR2(40);
STAT VARCHAR2(40);
BEGIN
OPEN I;
LOOP FETCH I INTO TAB;
EXIT WHEN  I%NOTFOUND;

STAT := SUBSTR(TAB, 1 ,28);

DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE L$'||STAT||'
IS
BEGIN
UPDATE '||TAB||'
SET ROW_NO = NULL;
COMMIT;
END L$'||STAT||';');
END LOOP;
CLOSE I;
END NUL_RNO;

PROCEDURE MAINTAIN_ROW_NO
IS
CURSOR I IS
SELECT TABLE_NAME
FROM USER_TABLES
WHERE TABLE_NAME NOT IN('DAM_COM_INDUST'
,'DISTINCT_INSERT_DATE'
,'TABLES_NAMES'
,'TBL_AMANAT_KASHF'
,' INV_TRANSACTION_D_EMP_DETAILS'
,'TBL_NOT_DIRECT'
,'ASSET_BASIC'
,'DAM_COM_INDUST'
,'CURRENT_TABLES');
TAB  VARCHAR2(40);
STAT VARCHAR2(40);
BEGIN
OPEN I;
LOOP FETCH I INTO TAB;
EXIT WHEN  I%NOTFOUND;

STAT := SUBSTR(TAB, 1 ,28);

DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE M$'||STAT||'
IS
BEGIN
L$'||STAT||';
O$'||STAT||';
END M$'||STAT||';');
END LOOP;
CLOSE I;
END MAINTAIN_ROW_NO;

PROCEDURE REMOVE_JOBS
IS
CURSOR I IS
SELECT JOB FROM USER_JOBS;
J NUMBER;
BEGIN
OPEN I;
LOOP FETCH I INTO J;
EXIT WHEN I%NOTFOUND;
DBMS_JOB.REMOVE(JOB=>J);
END LOOP;
CLOSE I;
END REMOVE_JOBS;

PROCEDURE GRANT_SEL_UPT_DET
(P_USER VARCHAR2)
IS
BEGIN
DBMS_UTILITY.EXEC_DDL_STATEMENT('
GRANT SELECT ANY TABLE ,
INSERT ANY TABLE ,
UPDATE ANY TABLE,
DELETE ANY TABLE TO '||P_USER);
END GRANT_SEL_UPT_DET;

PROCEDURE CREATE_DB_LINK
(P_DB VARCHAR, P_USER VARCHAR2, P_PASSWD VARCHAR2, P_TNS VARCHAR2)
IS
CURSOR I IS SELECT DB_LINK FROM USER_DB_LINKS;
DB_NAME  VARCHAR2(30);
SUB_NAME VARCHAR2(30);
V NUMBER := 0;
BEGIN
OPEN I;
LOOP FETCH I INTO DB_NAME;
EXIT WHEN I%NOTFOUND;
SUB_NAME :=SUBSTR(DB_NAME,1,INSTR(DB_NAME,'.',1)-1);
IF SUB_NAME= P_DB THEN
V := V + 1;
END IF;
END LOOP;
CLOSE I;
IF V = 0 THEN
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE DATABASE LINK '||P_DB||' CONNECT TO
'||P_USER||' IDENTIFIED BY '||P_PASSWD||' USING '||''''||P_TNS||'''');
ELSE
DBMS_OUTPUT.PUT_LINE('DATABASE LINK ALREADY EXIST');
END IF;
END CREATE_DB_LINK;

PROCEDURE REMOVE_ROW_NO_INSERT_DATE
IS
CURSOR I IS
SELECT DISTINCT TABLE_NAME
FROM USER_TAB_COLUMNS
WHERE COLUMN_NAME ='ROW_NO'
AND TABLE_NAME NOT LIKE 'F$%';
TAB VARCHAR2(40);
STAT VARCHAR2(40);
BEGIN
OPEN I;
LOOP FETCH I INTO TAB;
EXIT WHEN  I%NOTFOUND;
DBMS_UTILITY.EXEC_DDL_STATEMENT('
ALTER TABLE '||TAB||' DROP COLUMN ROW_NO');
DBMS_UTILITY.EXEC_DDL_STATEMENT('
ALTER TABLE '||TAB||' DROP COLUMN INSERT_DATE');
END LOOP;
CLOSE I;
END REMOVE_ROW_NO_INSERT_DATE;

PROCEDURE ADD_UPDATE_DATE_COLUMN
IS
CURSOR I IS
SELECT TABLE_NAME
FROM USER_TABLES
WHERE TABLE_NAME NOT IN('ALL_TABLES_COLUMNS','CURRENT_TABLES');
TAB VARCHAR2(40);
BEGIN
OPEN I;
LOOP FETCH I INTO TAB;
EXIT WHEN  I%NOTFOUND;
DBMS_UTILITY.EXEC_DDL_STATEMENT('
ALTER TABLE '||TAB||' ADD UPDATE_DATE DATE');
END LOOP;
CLOSE I;
END ADD_UPDATE_DATE_COLUMN;

PROCEDURE FLASH_BETWEEN
(TAB VARCHAR2 , DATE_FROM VARCHAR2, DATE_TO VARCHAR2)
IS

FUN   VARCHAR2(4000);
V_FUN VARCHAR2(4000);
USR   VARCHAR2(40);
STAT  VARCHAR2(40);

BEGIN

STAT := SUBSTR(TAB, 1 , 28);
SELECT FULL_COLUMNS(TAB) INTO FUN FROM DUAL;
SELECT FULL_COLUMNS_V(TAB) INTO V_FUN FROM DUAL;
SELECT USERNAME INTO USR FROM USER_USERS;

DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE FLASH_DELETE_ROWS
IS

CURSOR I IS
SELECT '||FUN||'
FROM AUD_'||USR||'.D'||STAT||'
WHERE DELETE_DATEE BETWEEN TO_DATE('||''''||DATE_FROM||''''||',''DD-MM-YYYY HH:MI:SS AM'')
AND TO_DATE('||''''||DATE_TO||''''||',''DD-MM-YYYY HH:MI:SS AM'');

V '||USR||'.'||TAB||'%ROWTYPE;

BEGIN

OPEN I;
LOOP FETCH I INTO '||V_FUN||';
EXIT WHEN  I%NOTFOUND;

INSERT INTO '||USR||'.'||TAB||' ('||FUN||')
VALUES ('||V_FUN||');

COMMIT;

END LOOP;
CLOSE I;

END FLASH_DELETE_ROWS;');
END FLASH_BETWEEN;

PROCEDURE FLASH
(TAB VARCHAR2 , SMPL VARCHAR2)
IS

FUN   VARCHAR2(4000);
V_FUN VARCHAR2(4000);
USR   VARCHAR2(40);
STAT  VARCHAR2(40);

BEGIN

STAT := SUBSTR(TAB, 1 , 28);
SELECT FULL_COLUMNS(TAB) INTO FUN FROM DUAL;
SELECT FULL_COLUMNS_V(TAB) INTO V_FUN FROM DUAL;
SELECT USERNAME INTO USR FROM USER_USERS;

DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE OR REPLACE PROCEDURE FLASH_DELETE_ROWS
IS

CURSOR I IS
SELECT '||FUN||'
FROM AUD_'||USR||'.D'||STAT||'
WHERE REFERENCE= '||''''||SMPL||''''||';

V '||USR||'.'||TAB||'%ROWTYPE;

BEGIN

OPEN I;
LOOP FETCH I INTO '||V_FUN||';
EXIT WHEN  I%NOTFOUND;

INSERT INTO '||USR||'.'||TAB||' ('||FUN||')
VALUES ('||V_FUN||');

COMMIT;

END LOOP;
CLOSE I;

END FLASH_DELETE_ROWS;');
END FLASH;

PROCEDURE DROP_UPDATE_DATE_COLUMN
IS
CURSOR I IS
SELECT TABLE_NAME
FROM USER_TAB_columns
WHERE column_name ='UPDATE_DATE';
TAB VARCHAR2(40);
BEGIN
OPEN I;
LOOP FETCH I INTO TAB;
EXIT WHEN  I%NOTFOUND;
DBMS_UTILITY.EXEC_DDL_STATEMENT('
ALTER TABLE '||TAB||' DROP COLUMN UPDATE_DATE');
END LOOP;
CLOSE I;
END DROP_UPDATE_DATE_COLUMN;

PROCEDURE REFRESH_JOBS
IS
CURSOR I IS
SELECT JOB
FROM USER_JOBS
WHERE NEXT_DATE < SYSDATE;
V USER_JOBS%ROWTYPE;
BEGIN
OPEN I;
LOOP FETCH I INTO V.JOB ;
EXIT WHEN  I%NOTFOUND;

DBMS_JOB.RUN(JOB=> V.JOB);

END LOOP;
CLOSE I;

END REFRESH_JOBS;


PROCEDURE INTERVAL_JOBS
IS
CURSOR I IS
SELECT JOB
FROM USER_JOBS;
V USER_JOBS%ROWTYPE;
BEGIN
OPEN I;
LOOP FETCH I INTO V.JOB ;
EXIT WHEN  I%NOTFOUND;

DBMS_JOB.INTERVAL(JOB=> V.JOB, INTERVAL=>'SYSDATE +30/24/60');

END LOOP;
CLOSE I;

END INTERVAL_JOBS;

FUNCTION NEED_REFRESH
RETURN NUMBER
IS
N NUMBER;
BEGIN
SELECT COUNT(*) INTO N
FROM USER_JOBS
WHERE NEXT_DATE < SYSDATE;
RETURN N;
END NEED_REFRESH;

PROCEDURE PROGRESS_INSERT
(OPER NUMBER)
IS
CURSOR I IS
SELECT TABLE_NAME
FROM USER_TABLES
WHERE TABLE_NAME NOT IN (SELECT DISTINCT TABLE_NAME FROM USER_TAB_COLUMNS
WHERE TABLE_NAME NOT LIKE 'F$_%'
MINUS
SELECT DISTINCT TABLE_NAME FROM USER_TAB_COLUMNS
WHERE COLUMN_NAME ='INSERT_DATE'
AND TABLE_NAME NOT LIKE 'F$_%');
TAB VARCHAR2(50);
CUR SYS_REFCURSOR;
STAT VARCHAR2(200) := ' SELECT COUNT(*) FROM ';
WHER VARCHAR2(200) := '
WHERE INSERT_DATE > TRUNC(SYSDATE) - '||OPER;
MAX_INSERT NUMBER;
BEGIN
DBMS_OUTPUT.PUT_LINE('TABLE NAME                 THIS DAY');
DBMS_OUTPUT.PUT_LINE('----------------------------------------------');
OPEN I;
LOOP FETCH I INTO TAB;
EXIT WHEN  I%NOTFOUND;
OPEN CUR FOR STAT||TAB||WHER;
FETCH CUR INTO MAX_INSERT;
IF MAX_INSERT > 0 THEN
DBMS_OUTPUT.PUT_LINE(TAB||'   '||MAX_INSERT);
END IF;
END LOOP;
CLOSE I;
END PROGRESS_INSERT;

PROCEDURE CREATE_CURRENT_TABLES
IS
BEGIN
-----------------COMMENT---------------------------
---------------------------------------------------
--THIS PROCEDURE EXECUTE ONLY ONE TIME
--IN THE FIRST OF THE REPLICATION
---------------------------------------------------
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE TABLE CURRENT_TABLES AS SELECT TABLE_NAME FROM USER_TABLES');
DBMS_UTILITY.EXEC_DDL_STATEMENT('
CREATE TABLE ALL_TABLES_COLUMNS AS SELECT TABLE_NAME, COLUMN_NAME FROM USER_TAB_COLUMNS');
END CREATE_CURRENT_TABLES;

END PACKETS;
/
